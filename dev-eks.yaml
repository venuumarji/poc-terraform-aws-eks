data.aws_eks_cluster_auth.cluster: Reading...
data.aws_eks_cluster_auth.cluster: Read complete after 0s [id=dev-eks-cluster]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.eks.aws_eks_addon.coredns will be created
  + resource "aws_eks_addon" "coredns" {
      + addon_name           = "coredns"
      + addon_version        = "v1.11.3-eksbuild.2"
      + arn                  = (known after apply)
      + cluster_name         = "dev-eks-cluster"
      + configuration_values = (known after apply)
      + created_at           = (known after apply)
      + id                   = (known after apply)
      + modified_at          = (known after apply)
      + tags_all             = (known after apply)
    }

  # module.eks.aws_eks_addon.vpc_cni will be created
  + resource "aws_eks_addon" "vpc_cni" {
      + addon_name           = "vpc-cni"
      + addon_version        = "v1.19.0-eksbuild.1"
      + arn                  = (known after apply)
      + cluster_name         = "dev-eks-cluster"
      + configuration_values = (known after apply)
      + created_at           = (known after apply)
      + id                   = (known after apply)
      + modified_at          = (known after apply)
      + tags_all             = (known after apply)
    }

  # module.eks.aws_eks_cluster.this will be created
  + resource "aws_eks_cluster" "this" {
      + arn                   = (known after apply)
      + certificate_authority = (known after apply)
      + cluster_id            = (known after apply)
      + created_at            = (known after apply)
      + endpoint              = (known after apply)
      + id                    = (known after apply)
      + identity              = (known after apply)
      + name                  = "dev-eks-cluster"
      + platform_version      = (known after apply)
      + role_arn              = (known after apply)
      + status                = (known after apply)
      + tags                  = {
          + "Environment" = "dev"
          + "Owner"       = "dev-team"
          + "Project"     = "eks"
        }
      + tags_all              = {
          + "Environment" = "dev"
          + "Owner"       = "dev-team"
          + "Project"     = "eks"
        }
      + version               = "1.31"

      + kubernetes_network_config (known after apply)

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = false
          + endpoint_public_access    = true
          + public_access_cidrs       = (known after apply)
          + subnet_ids                = (known after apply)
          + vpc_id                    = (known after apply)
        }
    }

  # module.eks.aws_eks_node_group.this will be created
  + resource "aws_eks_node_group" "this" {
      + ami_type               = (known after apply)
      + arn                    = (known after apply)
      + capacity_type          = (known after apply)
      + cluster_name           = "dev-eks-cluster"
      + disk_size              = (known after apply)
      + id                     = (known after apply)
      + instance_types         = (known after apply)
      + node_group_name        = "dev-eks-cluster-managed-ng"
      + node_group_name_prefix = (known after apply)
      + node_role_arn          = (known after apply)
      + release_version        = (known after apply)
      + resources              = (known after apply)
      + status                 = (known after apply)
      + subnet_ids             = (known after apply)
      + tags                   = {
          + "Environment" = "dev"
          + "Owner"       = "dev-team"
          + "Project"     = "eks"
        }
      + tags_all               = {
          + "Environment" = "dev"
          + "Owner"       = "dev-team"
          + "Project"     = "eks"
        }
      + version                = (known after apply)

      + launch_template {
          + id      = (known after apply)
          + name    = (known after apply)
          + version = "$Latest"
        }

      + scaling_config {
          + desired_size = 2
          + max_size     = 3
          + min_size     = 1
        }

      + update_config (known after apply)
    }

  # module.eks.aws_iam_role.ebs_csi_driver will be created
  + resource "aws_iam_role" "ebs_csi_driver" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dev-eks-cluster-ebs-csi-driver"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + role_last_used        = (known after apply)
      + tags                  = {
          + "Environment" = "dev"
          + "Owner"       = "dev-team"
          + "Project"     = "eks"
        }
      + tags_all              = {
          + "Environment" = "dev"
          + "Owner"       = "dev-team"
          + "Project"     = "eks"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks.aws_iam_role.eks_cluster will be created
  + resource "aws_iam_role" "eks_cluster" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dev-eks-cluster-eks-cluster-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + role_last_used        = (known after apply)
      + tags                  = {
          + "Environment" = "dev"
          + "Owner"       = "dev-team"
          + "Project"     = "eks"
        }
      + tags_all              = {
          + "Environment" = "dev"
          + "Owner"       = "dev-team"
          + "Project"     = "eks"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks.aws_iam_role.eks_node will be created
  + resource "aws_iam_role" "eks_node" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "dev-eks-cluster-eks-node-role"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + role_last_used        = (known after apply)
      + tags                  = {
          + "Environment" = "dev"
          + "Owner"       = "dev-team"
          + "Project"     = "eks"
        }
      + tags_all              = {
          + "Environment" = "dev"
          + "Owner"       = "dev-team"
          + "Project"     = "eks"
        }
      + unique_id             = (known after apply)

      + inline_policy (known after apply)
    }

  # module.eks.aws_iam_role_policy_attachment.ebs_csi_policy will be created
  + resource "aws_iam_role_policy_attachment" "ebs_csi_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy"
      + role       = "dev-eks-cluster-ebs-csi-driver"
    }

  # module.eks.aws_iam_role_policy_attachment.eks_cluster_policy will be created
  + resource "aws_iam_role_policy_attachment" "eks_cluster_policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = "dev-eks-cluster-eks-cluster-role"
    }

  # module.eks.aws_iam_role_policy_attachment.worker_node_policies["arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"] will be created
  + resource "aws_iam_role_policy_attachment" "worker_node_policies" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "dev-eks-cluster-eks-node-role"
    }

  # module.eks.aws_iam_role_policy_attachment.worker_node_policies["arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"] will be created
  + resource "aws_iam_role_policy_attachment" "worker_node_policies" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = "dev-eks-cluster-eks-node-role"
    }

  # module.eks.aws_iam_role_policy_attachment.worker_node_policies["arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"] will be created
  + resource "aws_iam_role_policy_attachment" "worker_node_policies" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = "dev-eks-cluster-eks-node-role"
    }

  # module.eks.aws_launch_template.node_lt will be created
  + resource "aws_launch_template" "node_lt" {
      + arn             = (known after apply)
      + default_version = (known after apply)
      + id              = (known after apply)
      + image_id        = "ami-04fe8f90ca037b7b0"
      + instance_type   = "t2.micro"
      + latest_version  = (known after apply)
      + name            = "dev-eks-cluster-lt"
      + name_prefix     = (known after apply)
      + tags_all        = (known after apply)
      + user_data       = "IyEvYmluL2Jhc2gNCi9ldGMvZWtzL2Jvb3RzdHJhcC5zaCBkZXYtZWtzLWNsdXN0ZXINCg0Kc3VkbyB5dW0gdXBkYXRlIC15DQpzdWRvIHl1bSBpbnN0YWxsIC15IGh0dHBkDQpzdWRvIHN5c3RlbWN0bCBzdGFydCBodHRwZA0Kc3VkbyBzeXN0ZW1jdGwgZW5hYmxlIGh0dHBkDQplY2hvICI8aDE+SGVsbG8hISBXZWxjb21lIHRvIGRlbW8gZnJvbSBUZXJyYWZvcm0hPC9oMT4iID4gL3Zhci93d3cvaHRtbC9pbmRleC5odG1sDQo="

      + block_device_mappings {
          + device_name = "/dev/xvda"

          + ebs {
              + iops        = (known after apply)
              + throughput  = (known after apply)
              + volume_size = 20
              + volume_type = "gp3"
            }
        }

      + metadata_options (known after apply)

      + tag_specifications {
          + resource_type = "instance"
          + tags          = {
              + "Environment" = "dev"
              + "Owner"       = "dev-team"
              + "Project"     = "eks"
            }
        }
    }

  # module.keypair.aws_ssm_parameter.private_key will be created
  + resource "aws_ssm_parameter" "private_key" {
      + arn            = (known after apply)
      + data_type      = (known after apply)
      + description    = "Private key for EC2 access"
      + id             = (known after apply)
      + insecure_value = (known after apply)
      + key_id         = (known after apply)
      + name           = "/dev/keypair/private"
      + tags_all       = (known after apply)
      + tier           = (known after apply)
      + type           = "SecureString"
      + value          = (sensitive value)
      + version        = (known after apply)
    }

  # module.keypair.aws_ssm_parameter.public_key will be created
  + resource "aws_ssm_parameter" "public_key" {
      + arn            = (known after apply)
      + data_type      = (known after apply)
      + description    = "Public key for EC2 access"
      + id             = (known after apply)
      + insecure_value = (known after apply)
      + key_id         = (known after apply)
      + name           = "/dev/keypair/public"
      + tags_all       = (known after apply)
      + tier           = (known after apply)
      + type           = "String"
      + value          = (sensitive value)
      + version        = (known after apply)
    }

  # module.keypair.tls_private_key.eks will be created
  + resource "tls_private_key" "eks" {
      + algorithm                     = "RSA"
      + ecdsa_curve                   = "P224"
      + id                            = (known after apply)
      + private_key_openssh           = (sensitive value)
      + private_key_pem               = (sensitive value)
      + private_key_pem_pkcs8         = (sensitive value)
      + public_key_fingerprint_md5    = (known after apply)
      + public_key_fingerprint_sha256 = (known after apply)
      + public_key_openssh            = (known after apply)
      + public_key_pem                = (known after apply)
      + rsa_bits                      = 4096
    }

  # module.vpc.aws_internet_gateway.this will be created
  + resource "aws_internet_gateway" "this" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Environment" = "dev"
          + "Name"        = "dev-eks-cluster-igw"
          + "Owner"       = "dev-team"
          + "Project"     = "eks"
        }
      + tags_all = {
          + "Environment" = "dev"
          + "Name"        = "dev-eks-cluster-igw"
          + "Owner"       = "dev-team"
          + "Project"     = "eks"
        }
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_route_table.public will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + gateway_id                 = (known after apply)
                # (11 unchanged attributes hidden)
            },
        ]
      + tags             = {
          + "Environment" = "dev"
          + "Name"        = "dev-eks-cluster-public-rt"
          + "Owner"       = "dev-team"
          + "Project"     = "eks"
        }
      + tags_all         = {
          + "Environment" = "dev"
          + "Name"        = "dev-eks-cluster-public-rt"
          + "Owner"       = "dev-team"
          + "Project"     = "eks"
        }
      + vpc_id           = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[0] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.public[1] will be created
  + resource "aws_route_table_association" "public" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_subnet.public[0] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment"                           = "dev"
          + "Name"                                  = "dev-eks-cluster-public-subnet-1"
          + "Owner"                                 = "dev-team"
          + "Project"                               = "eks"
          + "kubernetes.io/cluster/dev-eks-cluster" = "shared"
          + "kubernetes.io/role/elb"                = "1"
        }
      + tags_all                                       = {
          + "Environment"                           = "dev"
          + "Name"                                  = "dev-eks-cluster-public-subnet-1"
          + "Owner"                                 = "dev-team"
          + "Project"                               = "eks"
          + "kubernetes.io/cluster/dev-eks-cluster" = "shared"
          + "kubernetes.io/role/elb"                = "1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public[1] will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-2b"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment"                           = "dev"
          + "Name"                                  = "dev-eks-cluster-public-subnet-2"
          + "Owner"                                 = "dev-team"
          + "Project"                               = "eks"
          + "kubernetes.io/cluster/dev-eks-cluster" = "shared"
          + "kubernetes.io/role/elb"                = "1"
        }
      + tags_all                                       = {
          + "Environment"                           = "dev"
          + "Name"                                  = "dev-eks-cluster-public-subnet-2"
          + "Owner"                                 = "dev-team"
          + "Project"                               = "eks"
          + "kubernetes.io/cluster/dev-eks-cluster" = "shared"
          + "kubernetes.io/role/elb"                = "1"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.this will be created
  + resource "aws_vpc" "this" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Environment" = "dev"
          + "Name"        = "dev-eks-cluster-vpc"
          + "Owner"       = "dev-team"
          + "Project"     = "eks"
        }
      + tags_all                             = {
          + "Environment" = "dev"
          + "Name"        = "dev-eks-cluster-vpc"
          + "Owner"       = "dev-team"
          + "Project"     = "eks"
        }
    }

Plan: 23 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + eks_cluster_endpoint = (known after apply)
  + eks_cluster_name     = "dev-eks-cluster"
  + nodegroup_name       = "dev-eks-cluster-managed-ng"
  + public_subnet_ids    = [
      + (known after apply),
      + (known after apply),
    ]
  + vpc_id               = (known after apply)

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
